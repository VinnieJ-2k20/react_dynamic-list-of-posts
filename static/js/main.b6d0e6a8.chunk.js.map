{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","App.jsx","index.js"],"names":["PostsList","posts","isPostSelected","onPostSelect","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","postId","onCommentSubmit","useState","name","setName","email","setEmail","body","setBody","isErrorNoteVisible","setIsErrorNoteVisible","useEffect","onSubmit","event","preventDefault","trim","newComment","addComment","required","placeholder","autoComplete","value","onChange","target","BASE_URL","getCommentsForPost","fetch","then","response","ok","Error","json","comments","data","comment","method","headers","JSON","stringify","PostDetails","postLoadingFailed","setComments","commentsLoadingFailed","setCommentsLoadingFailed","areCommentsHidden","setAreCommentsHidden","fetchComments","a","commentsFromServer","removeComment","commentId","deleteComment","commentsArr","filter","publishComment","length","currentState","getAllPosts","getUserPosts","getPostDetails","defaultProps","App","setPosts","isPostsLoadingFailed","setPostsLoadingFailed","activeUserId","setActiveUser","selectedPostId","setSelectedPostId","setPost","setPostLoadingFailed","fetchPosts","postsFromServer","postFromServer","fetchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6d0e6a8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({ posts, isPostSelected, onPostSelect }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>\n              {`[User ${post.userId}]: `}\n            </b>\n            {post.title}\n          </div>\n          {isPostSelected(post.id)\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onPostSelect()}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => onPostSelect(post.id)}\n              >\n                Open\n              </button>\n            )\n          }\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number,\n    title: PropTypes.string.isRequired,\n  })).isRequired,\n  isPostSelected: PropTypes.func.isRequired,\n  onPostSelect: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, onCommentSubmit }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [isErrorNoteVisible, setIsErrorNoteVisible] = useState(false);\n\n  useEffect(() => {\n    setIsErrorNoteVisible(false);\n  }, [name, email, body]);\n\n  const addComment = () => {\n    if (!body.trim()) {\n      setIsErrorNoteVisible(true);\n\n      return;\n    }\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    setName('');\n    setEmail('');\n    setBody('');\n\n    onCommentSubmit(newComment);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        addComment();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n          value={name}\n          onChange={({ target }) => setName(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          autoComplete=\"off\"\n          required\n          value={email}\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={({ target }) => setBody(target.value)}\n        />\n      </div>\n\n      {isErrorNoteVisible && (\n        <div className=\"NewCommentForm__error\">\n          Write something\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  onCommentSubmit: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport function getCommentsForPost(postId) {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load posts');\n      }\n\n      return response.json();\n    })\n    .then(comments => (comments.data || []));\n}\n\nexport function deleteComment(commentId) {\n  return fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function addComment(comment) {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  addComment, deleteComment, getCommentsForPost,\n} from '../../api/comments';\n\nexport const PostDetails = ({\n  postLoadingFailed,\n  id,\n  body,\n}) => {\n  const [comments, setComments] = useState([]);\n  const [\n    commentsLoadingFailed,\n    setCommentsLoadingFailed,\n  ] = useState(false);\n  const [areCommentsHidden, setAreCommentsHidden] = useState(false);\n\n  async function fetchComments() {\n    try {\n      await getCommentsForPost(id).then((commentsFromServer) => {\n        setComments(commentsFromServer);\n      });\n    } catch (error) {\n      setCommentsLoadingFailed(true);\n    }\n  }\n\n  useEffect(() => {\n    fetchComments();\n\n    return () => setComments([]);\n  }, [id]);\n\n  const removeComment = (commentId) => {\n    deleteComment(commentId);\n    setComments(commentsArr => commentsArr\n      .filter(comment => comment.id !== commentId));\n  };\n\n  const publishComment = async(comment) => {\n    await addComment(comment);\n    fetchComments();\n  };\n\n  const toggleComments = () => {\n    setAreCommentsHidden(currentState => !currentState);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {postLoadingFailed\n        ? (\n          <span className=\"PostDetails__post\">\n            Post loading failed\n          </span>\n        )\n        : (\n          <>\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>\n                {body}\n              </p>\n            </section>\n\n            {commentsLoadingFailed && (\n              <div>Failed to load comments</div>\n            )}\n\n            <section className=\"PostDetails__comments\">\n              {!!comments.length && (\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={toggleComments}\n                >\n                  {areCommentsHidden\n                    ? 'Show '\n                    : 'Hide '\n                  }\n                  {`${comments.length} comments`}\n                </button>\n              )}\n\n              {!areCommentsHidden && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          removeComment(comment.id);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={id}\n                  onCommentSubmit={publishComment}\n                />\n              </div>\n            </section>\n          </>\n        )\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postLoadingFailed: PropTypes.bool.isRequired,\n  id: PropTypes.number,\n  body: PropTypes.string,\n};\n\nPostDetails.defaultProps = {\n  id: 0,\n  body: '',\n};\n","import { BASE_URL } from './api';\n\nexport function getAllPosts() {\n  return fetch(`${BASE_URL}/posts`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load posts');\n      }\n\n      return response.json();\n    })\n    .then(posts => (posts.data.filter(post => post.userId)));\n}\n\nexport function getUserPosts(userId) {\n  return fetch(`${BASE_URL}/posts?userId=${userId}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load posts');\n      }\n\n      return response.json();\n    })\n    .then(posts => posts.data);\n}\n\nexport function getPostDetails(postId) {\n  return fetch(`${BASE_URL}/posts/${postId}`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('Failed to load posts');\n      }\n\n      return response.json();\n    });\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts, getPostDetails, getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isPostsLoadingFailed, setPostsLoadingFailed] = useState(false);\n  const [activeUserId, setActiveUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState();\n  const [post, setPost] = useState();\n  const [postLoadingFailed, setPostLoadingFailed] = useState(false);\n\n  async function fetchPosts(userId) {\n    try {\n      if (userId) {\n        await getUserPosts(userId).then((postsFromServer) => {\n          setPosts(postsFromServer);\n        });\n      } else {\n        await getAllPosts().then((postsFromServer) => {\n          setPosts(postsFromServer);\n        });\n      }\n    } catch (error) {\n      setPostsLoadingFailed(true);\n    }\n  }\n\n  async function fetchPost() {\n    try {\n      await getPostDetails(selectedPostId).then((postFromServer) => {\n        setPost(postFromServer.data);\n      });\n    } catch (error) {\n      setPostLoadingFailed(true);\n    }\n  }\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  useEffect(() => {\n    fetchPosts(activeUserId);\n  }, [activeUserId]);\n\n  useEffect(() => {\n    fetchPost();\n  }, [selectedPostId]);\n\n  const isPostSelected = postId => (postId === selectedPostId);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={activeUserId}\n            onChange={({ target }) => setActiveUser(+target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {!isPostsLoadingFailed\n            ? (\n              <PostsList\n                posts={posts}\n                isPostSelected={isPostSelected}\n                onPostSelect={setSelectedPostId}\n              />\n            )\n            : (<div>Posts loading failed</div>)\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails\n              {...post}\n              postLoadingFailed={postLoadingFailed}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}